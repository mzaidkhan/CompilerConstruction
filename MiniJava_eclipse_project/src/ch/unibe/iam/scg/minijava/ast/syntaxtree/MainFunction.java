//
// Generated by JTB 1.3.2
//

package ch.unibe.iam.scg.minijava.ast.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * f0 -> "public"
 * f1 -> "static"
 * f2 -> VoidType()
 * f3 -> "main"
 * f4 -> "("
 * f5 -> StringArrayType()
 * f6 -> Identifier()
 * f7 -> ")"
 * f8 -> "{"
 * f9 -> ( Statement() )*
 * f10 -> "}"
 * </PRE>
 */
public class MainFunction extends Node {
   public NodeToken f0;
   public NodeToken f1;
   public VoidType f2;
   public NodeToken f3;
   public NodeToken f4;
   public StringArrayType f5;
   public Identifier f6;
   public NodeToken f7;
   public NodeToken f8;
   public NodeListOptional f9;
   public NodeToken f10;

   public MainFunction(NodeToken n0, NodeToken n1, VoidType n2, NodeToken n3, NodeToken n4, StringArrayType n5, Identifier n6, NodeToken n7, NodeToken n8, NodeListOptional n9, NodeToken n10) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
      f9 = n9;
      f10 = n10;
   }

   public MainFunction(VoidType n0, StringArrayType n1, Identifier n2, NodeListOptional n3) {
      f0 = new NodeToken("public");
      f1 = new NodeToken("static");
      f2 = n0;
      f3 = new NodeToken("main");
      f4 = new NodeToken("(");
      f5 = n1;
      f6 = n2;
      f7 = new NodeToken(")");
      f8 = new NodeToken("{");
      f9 = n3;
      f10 = new NodeToken("}");
   }

   public void accept(ch.unibe.iam.scg.minijava.ast.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(ch.unibe.iam.scg.minijava.ast.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(ch.unibe.iam.scg.minijava.ast.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(ch.unibe.iam.scg.minijava.ast.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

