//
// Generated by JTB 1.3.2
//

options {
   JDK_VERSION = "1.5";
   static = false;
}

PARSER_BEGIN(MiniJavaImpl)
package ch.unibe.iam.scg.javacc;

import ch.unibe.iam.scg.minijava.MiniJava;
import ch.unibe.iam.scg.minijava.ast.*;
import ch.unibe.iam.scg.minijava.ast.syntaxtree.*;
import java.util.Vector;


public class MiniJavaImpl implements MiniJava
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(MiniJavaImpl)

SKIP :
{
   " "
   | "\r"
   | "\t"
   | "\n"
}

TOKEN :
{
   <CLASS: "class">
   | <PUBLIC: "public">
   | <STATIC: "static">
   | <VOID: "void">
   | <MAIN: "main">
   | <OPEN_PARENTHESIS: "(">
   | <CLOSE_PARENTHESIS: ")">
   | <STRING: "String">
   | <OPEN_SQUARE_BRACKET: "[">
   | <CLOSE_SQUARE_BRACKET: "]">
   | <OPEN_FLOWER_BRACKET: "{">
   | <CLOSE_FLOWER_BRACKET: "}">
   | <EXTENDS: "extends">
   | <SEMICOLON: ";">
   | <COMMA: ",">
   | <RETURN: "return">
   | <INT: "int">
   | <BOOLEAN: "boolean">
   | <IF: "if">
   | <ELSE: "else">
   | <WHILE: "while">
   | <SYSOUT: "System.out.println">
   | <ASSIGN: "=">
   | <AND: "&&">
   | <LESS_THAN: "<">
   | <PLUS: "+">
   | <MINUS: "-">
   | <TIMES: "*">
   | <PROPERTY: ".">
   | <LENGTH: "length">
   | <TRUE: "true">
   | <FALSE: "false">
   | <THIS: "this">
   | <NEW: "new">
   | <NOT: "!">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["a"-"z", "A"-"Z"]>
   | <#DIGIT: ["0"-"9"]>
}

Goal Goal() :
{
   MainClass n0;
   NodeListOptional n1 = new NodeListOptional();
   ClassDeclaration n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=MainClass()
   (
      n2=ClassDeclaration()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   n4=<EOF> { 
      n4.beginColumn++; n4.endColumn++;
      n3 = JTBToolkit.makeNodeToken(n4);
   }
   
   { return new Goal(n0,n1,n3); }
}

MainClass MainClass() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   MainFunction n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="class" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="{" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=MainFunction()
   n7="}" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new MainClass(n0,n2,n3,n5,n6); }
}

MainFunction MainFunction() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   VoidType n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   StringArrayType n9;
   Identifier n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeListOptional n15 = new NodeListOptional();
   Statement n16;
   NodeToken n17;
   Token n18;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="static" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=VoidType()
   n6="main" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="(" { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=StringArrayType()
   n10=Identifier()
   n12=")" { n11 = JTBToolkit.makeNodeToken(n12); }
   n14="{" { n13 = JTBToolkit.makeNodeToken(n14); }
   (
      n16=Statement()
      { n15.addNode(n16); }
   )*
   { n15.nodes.trimToSize(); }
   n18="}" { n17 = JTBToolkit.makeNodeToken(n18); }
   
   { return new MainFunction(n0,n2,n4,n5,n7,n9,n10,n11,n13,n15,n17); }
}

ClassDeclaration ClassDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   NodeListOptional n10 = new NodeListOptional();
   VarDeclaration n11;
   NodeListOptional n12 = new NodeListOptional();
   MethodDeclaration n13;
   NodeToken n14;
   Token n15;

   
}
{
   n1="class" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   (
      { n4 = new NodeSequence(2); }
      n6="extends" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=Identifier()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   n9="{" { n8 = JTBToolkit.makeNodeToken(n9); }
   (
      n11=VarDeclaration()
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   (
      n13=MethodDeclaration()
      { n12.addNode(n13); }
   )*
   { n12.nodes.trimToSize(); }
   n15="}" { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new ClassDeclaration(n0,n2,n3,n8,n10,n12,n14); }
}

VarDeclaration VarDeclaration() :
{
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;

   
}
{
   n0=Type()
   n1=Identifier()
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new VarDeclaration(n0,n1,n2); }
}

MethodDeclaration MethodDeclaration() :
{
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   FormalParameterList n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeListOptional n12 = new NodeListOptional();
   VarDeclaration n13;
   NodeListOptional n14 = new NodeListOptional();
   Statement n15;
   NodeToken n16;
   Token n17;
   Expression n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Type()
   n3=Identifier()
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=FormalParameterList()
      { n6.addNode(n7); }
   )?
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11="{" { n10 = JTBToolkit.makeNodeToken(n11); }
   (
      LOOKAHEAD(2)
      n13=VarDeclaration()
      { n12.addNode(n13); }
   )*
   { n12.nodes.trimToSize(); }
   (
      n15=Statement()
      { n14.addNode(n15); }
   )*
   { n14.nodes.trimToSize(); }
   n17="return" { n16 = JTBToolkit.makeNodeToken(n17); }
   n18=Expression()
   n20=";" { n19 = JTBToolkit.makeNodeToken(n20); }
   n22="}" { n21 = JTBToolkit.makeNodeToken(n22); }
   
   { return new MethodDeclaration(n0,n2,n3,n4,n6,n8,n10,n12,n14,n16,n18,n19,n21); }
}

FormalParameterList FormalParameterList() :
{
   FormalParameter n0;
   NodeListOptional n1 = new NodeListOptional();
   MoreFormalParameter n2;

   
}
{
   n0=FormalParameter()
   (
      n2=MoreFormalParameter()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new FormalParameterList(n0,n1); }
}

FormalParameter FormalParameter() :
{
   Type n0;
   Identifier n1;

   
}
{
   n0=Type()
   n1=Identifier()
   
   { return new FormalParameter(n0,n1); }
}

MoreFormalParameter MoreFormalParameter() :
{
   NodeToken n0;
   Token n1;
   FormalParameter n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FormalParameter()
   
   { return new MoreFormalParameter(n0,n2); }
}

Type Type() :
{
   NodeChoice n0;
   ArrayType n1;
   StringArrayType n2;
   BooleanType n3;
   IntegerType n4;
   VoidType n5;
   Identifier n6;

   
}
{
   (
      LOOKAHEAD(3)
      n1=ArrayType()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=StringArrayType()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=BooleanType()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=IntegerType()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=VoidType()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=Identifier()
      { n0 = new NodeChoice(n6, 5); }
   )
   
   { return new Type(n0); }
}

StringArrayType StringArrayType() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="String" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new StringArrayType(n0,n2,n4); }
}

VoidType VoidType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="void" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new VoidType(n0); }
}

ArrayType ArrayType() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="int" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ArrayType(n0,n2,n4); }
}

BooleanType BooleanType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="boolean" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new BooleanType(n0); }
}

IntegerType IntegerType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="int" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerType(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   Block n1;
   AssignmentStatement n2;
   ArrayAssignmentStatement n3;
   IfStatement n4;
   WhileStatement n5;
   PrintStatement n6;

   
}
{
   (
      n1=Block()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      n2=AssignmentStatement()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(2)
      n3=ArrayAssignmentStatement()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=IfStatement()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=WhileStatement()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=PrintStatement()
      { n0 = new NodeChoice(n6, 5); }
   )
   
   { return new Statement(n0); }
}

Block Block() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   Statement n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Statement()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5="}" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Block(n0,n2,n4); }
}

AssignmentStatement AssignmentStatement() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=Identifier()
   n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Expression()
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new AssignmentStatement(n0,n1,n3,n4); }
}

ArrayAssignmentStatement ArrayAssignmentStatement() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Expression n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;
   NodeToken n9;
   Token n10;

   
}
{
   n0=Identifier()
   n2="[" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Expression()
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="=" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Expression()
   n10=";" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new ArrayAssignmentStatement(n0,n1,n3,n4,n6,n8,n9); }
}

IfStatement IfStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeToken n8;
   Token n9;
   Statement n10;

   
}
{
   n1="if" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   n9="else" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=Statement()
   
   { return new IfStatement(n0,n2,n4,n5,n7,n8,n10); }
}

WhileStatement WhileStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1="while" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new WhileStatement(n0,n2,n4,n5,n7); }
}

PrintStatement PrintStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="System.out.println" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new PrintStatement(n0,n2,n4,n5,n7); }
}

Expression Expression() :
{
   Sum n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   Expression n10;

   
}
{
   n0=Sum()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="&&" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="<" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9=">" { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         )
         
      )
      { n2.addNode(n3); }
      n10=Expression()
      { n2.addNode(n10); }
      { n1.addNode(n2); }
   )?
   
   { return new Expression(n0,n1); }
}

Sum Sum() :
{
   Term n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Expression n8;

   
}
{
   n0=Term()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="+" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="-" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=Expression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new Sum(n0,n1); }
}

Term Term() :
{
   Factor n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;

   
}
{
   n0=Factor()
   (
      { n2 = new NodeSequence(2); }
      n4="*" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Expression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new Term(n0,n1); }
}

Factor Factor() :
{
   PrimaryExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   F n2;

   
}
{
   n0=PrimaryExpression()
   (
      n2=F()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Factor(n0,n1); }
}

F F() :
{
   NodeChoice n0;
   ArrayLookUp n1;
   LengthLookUp n2;
   MethodCall n3;

   
}
{
   (
      n1=ArrayLookUp()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      n2=LengthLookUp()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(2)
      n3=MethodCall()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new F(n0); }
}

ArrayLookUp ArrayLookUp() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4="]" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ArrayLookUp(n0,n2,n3); }
}

LengthLookUp LengthLookUp() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="length" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new LengthLookUp(n0,n2); }
}

MethodCall MethodCall() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   ParamList n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=ParamList()
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new MethodCall(n0,n2,n3,n5,n6); }
}

ParamList ParamList() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   Expression n2;
   NodeListOptional n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   MoreParameterExpression n7;

   
}
{
   (
      { n3 = new NodeListOptional(); }
      { n1 = new NodeSequence(2); }
      n2=Expression()
      { n1.addNode(n2); }
      (
         { n4 = new NodeSequence(2); }
         n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n7=MoreParameterExpression()
         { n4.addNode(n7); }
         { n3.addNode(n4); }
      )*
      { n3.nodes.trimToSize(); }
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )?
   
   { return new ParamList(n0); }
}

MoreParameterExpression MoreParameterExpression() :
{
   Expression n0;

   
}
{
   n0=Expression()
   
   { return new MoreParameterExpression(n0); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   IntegerLiteral n1;
   TrueLiteral n2;
   FalseLiteral n3;
   Identifier n4;
   ThisExpression n5;
   ArrayAllocationExpression n6;
   AllocationExpression n7;
   NotExpression n8;
   BracketExpression n9;

   
}
{
   (
      n1=IntegerLiteral()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=TrueLiteral()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=FalseLiteral()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=Identifier()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=ThisExpression()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(3)
      n6=ArrayAllocationExpression()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=AllocationExpression()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=NotExpression()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=BracketExpression()
      { n0 = new NodeChoice(n9, 8); }
   )
   
   { return new PrimaryExpression(n0); }
}

IntegerLiteral IntegerLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}

TrueLiteral TrueLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="true" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new TrueLiteral(n0); }
}

FalseLiteral FalseLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="false" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new FalseLiteral(n0); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}

ThisExpression ThisExpression() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="this" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ThisExpression(n0); }
}

ArrayAllocationExpression ArrayAllocationExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="new" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="int" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="[" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Expression()
   n8="]" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new ArrayAllocationExpression(n0,n2,n4,n6,n7); }
}

AllocationExpression AllocationExpression() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="new" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new AllocationExpression(n0,n2,n3,n5); }
}

NotExpression NotExpression() :
{
   NodeToken n0;
   Token n1;
   Expression n2;

   
}
{
   n1="!" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   
   { return new NotExpression(n0,n2); }
}

BracketExpression BracketExpression() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new BracketExpression(n0,n2,n3); }
}
