/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(MiniJavaImpl)package ch.unibe.iam.scg.javacc;import ch.unibe.iam.scg.minijava.MiniJava;import ch.unibe.iam.scg.minijava.ast.*;import ch.unibe.iam.scg.minijava.ast.syntaxtree.*;public class MiniJavaImpl implements MiniJava{}PARSER_END(MiniJavaImpl)SKIP :{  " "| "\r"| "\t"| "\n"}/* Terminals */TOKEN :{  < CLASS : "class" >| < PUBLIC : "public" >| < STATIC : "static" >| < VOID : "void" >| < MAIN : "main" >| < OPEN_PARENTHESIS : "(" >| < CLOSE_PARENTHESIS : ")" >| < STRING : "String" >| < OPEN_SQUARE_BRACKET : "[" >| < CLOSE_SQUARE_BRACKET : "]" >| < OPEN_FLOWER_BRACKET : "{" >| < CLOSE_FLOWER_BRACKET : "}" >| < EXTENDS : "extends" >| < SEMICOLON : ";" >| < COMMA : "," >| < RETURN : "return" >| < INT : "int" >| < BOOLEAN : "boolean" >| < IF : "if" >| < ELSE : "else" >| < WHILE : "while" >| < SYSOUT : "System.out.println" >| < ASSIGN : "=" >| < AND : "&&" >| < LESS_THAN : "<" >| < PLUS : "+" >| < MINUS : "-" >| < TIMES : "*" >| < PROPERTY : "." >| < LENGTH : "length" >| < TRUE : "true" >| < FALSE : "false" >| < THIS : "this" >| < NEW : "new" >| < NOT : "!" >}TOKEN : /* Numeric terminals */{  < INTEGER_LITERAL :    (      [ "1"-"9" ] ([ "0"-"9" ])*    | "0"    ) >}TOKEN : /* Identifier terminals */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/void Goal() :{}{  MainClass()  (    ClassDeclaration()  )*  < EOF >}void MainClass() :{}{  "class" Identifier() "{" MainFunction() "}"}void MainFunction() :{}{  "public" "static" VoidType() "main" "(" StringArrayType() Identifier() ")" "{"  (    Statement()  )*  "}"}void ClassDeclaration() :{}{  "class" Identifier()  (    "extends" Identifier()  )?  "{"  (    VarDeclaration()  )*  (    MethodDeclaration()  )*  "}"}void VarDeclaration() :{}{  Type() Identifier() ";"}void MethodDeclaration() :{}{  "public" Type() Identifier() "("  (    FormalParameterList()  )?  ")" "{"  (    LOOKAHEAD(2)    VarDeclaration()  )*  (    Statement()  )*  "return" Expression() ";" "}"}void FormalParameterList() :{}{  FormalParameter()  (    MoreFormalParameter()  )*}void FormalParameter() :{}{  Type() Identifier()}void MoreFormalParameter() :{}{  "," FormalParameter()}void Type() :{}{  LOOKAHEAD(3)  ArrayType()
| StringArrayType()| BooleanType()| IntegerType()| VoidType()| Identifier()}

void StringArrayType() :
{}
{
  "String" "[" "]"
}
void VoidType() :{}{  "void"}void ArrayType() :{}{  "int" "[" "]"}void BooleanType() :{}{  "boolean"}void IntegerType() :{}{  "int"}void Statement() :{}{  Block()| LOOKAHEAD(2)  AssignmentStatement()| LOOKAHEAD(2)  ArrayAssignmentStatement()| IfStatement()| WhileStatement()| PrintStatement()}void Block() :{}{  "{"  (    Statement()  )*  "}"}void AssignmentStatement() :{}{  Identifier() "=" Expression() ";"}void ArrayAssignmentStatement() :{}{  Identifier() "[" Expression() "]" "=" Expression() ";"}void IfStatement() :{}{  "if" "(" Expression() ")" Statement() "else" Statement()}void WhileStatement() :{}{  "while" "(" Expression() ")" Statement()}void PrintStatement() :{}{  "System.out.println" "(" Expression() ")" ";"}void Expression() :{}{  Sum()  (    (      "&&"    | "<"    | ">"    )    Expression()  )?}void Sum() :{}{  Term()  (    (      "+"    | "-"    )    Expression()  )?}void Term() :{}{  Factor()  (    "*" Expression()  )?}void Factor() :{}{  PrimaryExpression()  (    F()  )*}void F() :{}{  ArrayLookUp()| LOOKAHEAD(2)  LengthLookUp()| LOOKAHEAD(2)  MethodCall()}void ArrayLookUp() :{}{  "[" Expression() "]"}void LengthLookUp() :{}{  "." "length"}void MethodCall() :{}{  "." Identifier() "(" ParamList() ")"}void ParamList() :{}{  (    Expression()    (      "," MoreParameterExpression()    )*  )?}void MoreParameterExpression() :{}{  Expression()}void PrimaryExpression() :{}{  IntegerLiteral()| TrueLiteral()| FalseLiteral()| Identifier()| ThisExpression()| LOOKAHEAD(3)  ArrayAllocationExpression()| AllocationExpression()| NotExpression()| BracketExpression()}void IntegerLiteral() :{}{  < INTEGER_LITERAL >}void TrueLiteral() :{}{  "true"}void FalseLiteral() :{}{  "false"}void Identifier() :{}{  < IDENTIFIER >}void ThisExpression() :{}{  "this"}void ArrayAllocationExpression() :{}{  "new" "int" "[" Expression() "]"}void AllocationExpression() :{}{  "new" Identifier() "(" ")"}void NotExpression() :{}{  "!" Expression()}void BracketExpression() :{}{  "(" Expression() ")"}